{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\react-invoice-generator\\\\src\\\\components\\\\EditableSelect.tsx\";\nimport React, { useState } from 'react';\nimport { Text } from '@react-pdf/renderer';\nimport compose from '../styles/compose';\n\nconst EditableSelect = _ref => {\n  let {\n    className,\n    options,\n    placeholder,\n    value,\n    onChange,\n    pdfMode\n  } = _ref;\n  const [isEditing, setIsEditing] = useState(false);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, pdfMode ? /*#__PURE__*/React.createElement(Text, {\n    style: compose('span ' + (className ? className : '')),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, value) : /*#__PURE__*/React.createElement(React.Fragment, null, isEditing ? /*#__PURE__*/React.createElement(\"select\", {\n    className: 'select ' + (className ? className : ''),\n    value: value,\n    onChange: onChange ? e => onChange(e.target.value) : undefined,\n    onBlur: () => setIsEditing(false),\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, options === null || options === void 0 ? void 0 : options.map(option => /*#__PURE__*/React.createElement(\"option\", {\n    key: option.text,\n    value: option.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }, option.text))) : /*#__PURE__*/React.createElement(\"input\", {\n    readOnly: true,\n    type: \"text\",\n    className: 'input ' + (className ? className : ''),\n    value: value || '',\n    placeholder: placeholder || '',\n    onFocus: () => setIsEditing(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default EditableSelect;","map":{"version":3,"names":["React","useState","Text","compose","EditableSelect","className","options","placeholder","value","onChange","pdfMode","isEditing","setIsEditing","e","target","undefined","map","option","text"],"sources":["C:/Users/rajes/Documents/react-invoice-generator/src/components/EditableSelect.tsx"],"sourcesContent":["import React, { FC, useState } from 'react'\r\nimport { Text } from '@react-pdf/renderer'\r\nimport compose from '../styles/compose'\r\n\r\nexport interface SelectOption {\r\n  value: string\r\n  text: string\r\n}\r\n\r\ninterface Props {\r\n  className?: string\r\n  options?: SelectOption[]\r\n  placeholder?: string\r\n  value?: string\r\n  onChange?: (value: string) => void\r\n  pdfMode?: boolean\r\n}\r\n\r\nconst EditableSelect: FC<Props> = ({\r\n  className,\r\n  options,\r\n  placeholder,\r\n  value,\r\n  onChange,\r\n  pdfMode,\r\n}) => {\r\n  const [isEditing, setIsEditing] = useState<boolean>(false)\r\n\r\n  return (\r\n    <>\r\n      {pdfMode ? (\r\n        <Text style={compose('span ' + (className ? className : ''))}>{value}</Text>\r\n      ) : (\r\n        <>\r\n          {isEditing ? (\r\n            <select\r\n              className={'select ' + (className ? className : '')}\r\n              value={value}\r\n              onChange={onChange ? (e) => onChange(e.target.value) : undefined}\r\n              onBlur={() => setIsEditing(false)}\r\n              autoFocus={true}\r\n            >\r\n              {options?.map((option) => (\r\n                <option key={option.text} value={option.value}>\r\n                  {option.text}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          ) : (\r\n            <input\r\n              readOnly={true}\r\n              type=\"text\"\r\n              className={'input ' + (className ? className : '')}\r\n              value={value || ''}\r\n              placeholder={placeholder || ''}\r\n              onFocus={() => setIsEditing(true)}\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditableSelect\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,IAAT,QAAqB,qBAArB;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAgBA,MAAMC,cAAyB,GAAG,QAO5B;EAAA,IAP6B;IACjCC,SADiC;IAEjCC,OAFiC;IAGjCC,WAHiC;IAIjCC,KAJiC;IAKjCC,QALiC;IAMjCC;EANiC,CAO7B;EACJ,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAU,KAAV,CAA1C;EAEA,oBACE,0CACGS,OAAO,gBACN,oBAAC,IAAD;IAAM,KAAK,EAAEP,OAAO,CAAC,WAAWE,SAAS,GAAGA,SAAH,GAAe,EAAnC,CAAD,CAApB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAA+DG,KAA/D,CADM,gBAGN,0CACGG,SAAS,gBACR;IACE,SAAS,EAAE,aAAaN,SAAS,GAAGA,SAAH,GAAe,EAArC,CADb;IAEE,KAAK,EAAEG,KAFT;IAGE,QAAQ,EAAEC,QAAQ,GAAII,CAAD,IAAOJ,QAAQ,CAACI,CAAC,CAACC,MAAF,CAASN,KAAV,CAAlB,GAAqCO,SAHzD;IAIE,MAAM,EAAE,MAAMH,YAAY,CAAC,KAAD,CAJ5B;IAKE,SAAS,EAAE,IALb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAOGN,OAPH,aAOGA,OAPH,uBAOGA,OAAO,CAAEU,GAAT,CAAcC,MAAD,iBACZ;IAAQ,GAAG,EAAEA,MAAM,CAACC,IAApB;IAA0B,KAAK,EAAED,MAAM,CAACT,KAAxC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGS,MAAM,CAACC,IADV,CADD,CAPH,CADQ,gBAeR;IACE,QAAQ,EAAE,IADZ;IAEE,IAAI,EAAC,MAFP;IAGE,SAAS,EAAE,YAAYb,SAAS,GAAGA,SAAH,GAAe,EAApC,CAHb;IAIE,KAAK,EAAEG,KAAK,IAAI,EAJlB;IAKE,WAAW,EAAED,WAAW,IAAI,EAL9B;IAME,OAAO,EAAE,MAAMK,YAAY,CAAC,IAAD,CAN7B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAhBJ,CAJJ,CADF;AAkCD,CA5CD;;AA8CA,eAAeR,cAAf"},"metadata":{},"sourceType":"module"}